import { q } from "../../modules/DOM/utils";
import { getUrlParameters } from "../../modules/URL/utils";

const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

const $buttons = q("div.form-buttons") as HTMLDivElement;
const $good = q("button.form-button.good") as HTMLButtonElement;
const $meh = q("button.form-button.meh") as HTMLButtonElement;
const $bad = q("button.form-button.bad") as HTMLButtonElement;

const $loading = q("div.form-loading") as HTMLDivElement;

const $success = q("div.form-success") as HTMLDivElement;
const $successMessage = q("div.form-success-message") as HTMLDivElement;
const $successImage = q("div.form-success .form-image") as HTMLDivElement;

const $error = q("div.form-error") as HTMLDivElement;
const $errorMessage = q("div.form-error-message") as HTMLDivElement;

modifyTitles();
addListeners();

function modifyTitles() {
  const { plural, fool } = getUrlParameters();

  $good!.textContent = `–ö–æ–Ω–µ—á–Ω–æ ${plural ? "–ø—Ä–∏–µ–¥–µ–º" : "–ø—Ä–∏–µ–¥—É"}${fool ? " üòé" : "!"}`;
  $meh!.textContent = `–ü–æ–∫–∞ –Ω–µ ${plural ? "–∑–Ω–∞–µ–º" : "–∑–Ω–∞—é"}${fool ? " ü§î" : "..."}`;
  $bad!.textContent = `–£ ${plural ? "–Ω–∞—Å" : "–º–µ–Ω—è"} –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ${fool ? "ü§°" : ":("}`;
}

function addListeners() {
  $good.addEventListener("click", () => sendHandler("üòé"));
  $meh.addEventListener("click", () => sendHandler("ü§î"));
  $bad.addEventListener("click", () => sendHandler("ü§°"));
}

async function sendHandler(answer: string) {
  const { who, plural, scriptURL } = getUrlParameters();

  hideButtons();

  if (!scriptURL) {
    return showError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º");
  }

  show($loading);

  try {
    if (scriptURL === "fake") {
      await delay(3000);
    } else {
      await fetch(scriptURL, {
        method: "POST",
        body: JSON.stringify({ name: who ?? "–¢–∞–π–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü", answer }),
        headers: { "Content-Type": "application/json" },
      });
    }

    $successMessage.textContent = getReaction();
    $successImage.classList.add(getImageClassName());

    show($success);
  } catch (error) {
    showError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ ‚Äî ${plural ? "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ" : "–ø–æ–ø—Ä–æ–±—É–π"} —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é`);
  } finally {
    hide($loading);
  }

  function getReaction() {
    if (answer === "üòé") return "–ë—É–¥–µ–º –∂–¥–∞—Ç—å!";
    if (answer === "ü§î") return "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è –ø—Ä–∏–µ—Ö–∞—Ç—å!";
    return "–ñ–∞–ª—å, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è...";
  }

  function getImageClassName() {
    if (answer === "üòé") return "sad";
    if (answer === "ü§î") return "sad";
    return "sad";
  }
}

function hideButtons() {
  $good.setAttribute("disabled", "true");
  $meh.setAttribute("disabled", "true");
  $bad.setAttribute("disabled", "true");

  hide($buttons);
}

async function show(element: HTMLElement) {
  element.classList.remove("missing");

  await delay(10);

  element.classList.remove("hidden");
}
async function hide(element: HTMLElement) {
  element.classList.add("hidden");

  await delay(1000);

  element.classList.add("missing");
}

function showError(message: string) {
  $errorMessage.textContent = message;

  show($error);
}
